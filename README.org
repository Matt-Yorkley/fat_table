# FatTable

~FatTable~ is a gem that treats tables as a data type. It provides methods for
constructing tables from a variety of sources, building them row-by-row or
column-by-column, extracting rows and column, and performing aggregate
operations on columns. It also provides as set of SQL-esque methods for
manipulating table objects: ~select~ for filtering by columns or creating new
columns, ~where~ for filtering by rows, ~order_by~ for sorting rows, ~distinct~
for eliminating duplicate rows, ~group_by~ for aggregating multiple rows into
single rows and applying column aggregate methods to ungrouped columns, and a
collection of ~join~ methods for combining tables.

Furthermore, ~FatTable~ provides methods for formatting tables and producing
output that target various output media: text, ANSI terminals, ruby data
structures, LaTeX tables, Emacs org-mode tables, and more. The formatting
methods can specify cell formatting in a way that is uniform across all the
output methods and can also decorate the output with any number of footers.
~FatTable~ applies the formatting to the extent they make sense for the output
medium and treats other formatting directives as no-ops.

~FatTable~ can be used to perform operations on data that are naturally best
conceived of as tables, which in may experience is quite often.  It can also
serve as a foundation for providing reporting functions where flexibility about
the output medium can be quite useful.  Finally, one of the motivations for
~FatTable~, is to use it within Emacs ~org-mode~ files in code blocks targeting
the ruby language.  Org mode tables are presented to a ruby code block as an
array of arrays, so ~FatTable~ can read them in with its ~from_aoa~ constructor.
A ~FatTable~ table output as an array of arrays with its ~to_aoa~ output
functions will be rendered in an org-mode buffer as an org-table, ready for
processing by other code blocks.

* Installation

Add this line to your application's Gemfile:

#+BEGIN_SRC ruby
  gem 'fat_table'
#+END_SRC

And then execute:

#+BEGIN_SRC sh
  $ bundle
#+END_SRC

Or install it yourself as:

#+BEGIN_SRC sh
  $ gem install fat_table
#+END_SRC

* Usage

** Anatomy of a Table

~FatTable::Table~ objects consist of an array of ~FatTable::Column~ objects.
Each ~Column~ has a header, a type, and an array of items all of the given type
or nil.  There are only five permissible types for a ~Column~:

1. Boolean,
2. DateTime (or Date),
3. Numeric,
4. String, or
5. NilClass.

When a ~Table~ is constructed from an external source, all ~Column~s start out
having a type of ~NilClass~, that is, their type is as yet undetermined. When a
string or object of one of the four determined types is added to a ~Column~, it
fixes the type of the column and all further items added to the ~Column~ must
either be nil (indicating no value) or be capable of being coerced to the
columns type. Otherwise, ~FatTable~ raises an exception.

Items of input must be either one of the permissible ruby objects or strings. If
they are strings, ~FatTable~ attempts to parse them as one of the permissible
types as follows:

- Boolean :: the strings, 't', 'true', or 'yes', or 'y', regardless of case, are
     interpreted as ~TrueClass~ and the strings, 'f', 'false', 'no', or 'n',
     regardless of case, are interpreted as ~FalseClass~.
- DateTime :: strings that contain patterns of 'yyyy-mm-dd' or 'yyyy/mm/dd' will
     be interpreted as a ~DateTime~ or a ~Date~ (if there are no sub-day time
     components present). The number of digits in the month and day can be one
     or two, but the year component must be four digits. Any time components are
     valid if they can be properly interpreted by ~DateTime.parse~.
- Numeric :: all commas ',', underscores, '_', and dollar signs are removed from
     the string and it is then interpreted as an ~Integer~ if there are do
     decimal places in the remaining string, as a ~Rational~ if the string has
     the form '<number>:<number>' or '<number>/<number>', or as a ~BigDecimal~
     if there is a decimal point in the remaining string.
- String :: if all else fails, ~FatTable~ applies ~#to_s~ to the input and,
     treats it as an item of type ~String~.
- NilClass :: if

** Constructing Tables
*** Empty Tables

You can build an empty table with FatTable.new, and then add rows or colums

** Accessing Parts of Tables
*** Rows
*** Columns
*** Cells

** Operations on Tables

** Outputting Tables with Formatting

* Development

After checking out the repo, run `bin/setup` to install dependencies. Then, run
`rake spec` to run the tests. You can also run `bin/console` for an interactive
prompt that will allow you to experiment.

To install this gem onto your local machine, run `bundle exec rake install`. To
release a new version, update the version number in `version.rb`, and then run
`bundle exec rake release`, which will create a git tag for the version, push
git commits and tags, and push the `.gem` file to
[rubygems.org](https://rubygems.org).

* Contributing

Bug reports and pull requests are welcome on GitHub at
https://github.com/ddoherty03/fat_table.
